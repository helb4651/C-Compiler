  1 // C-F16
  2 //
  3 // Test all the basic elements of C- F16
  4 //
  5 //
  6 int gromit, shaun[77];
  7 
  8 wallace(int wrong, trousers, sheep)
  9 {
 10     bool close:true, shave:false;
 11    
 12     1729;
 13     close;
 14     11*22+33*44;
 15     close = shave;
 16     wrong = trousers % (666/wrong);
 17     wrong = trousers % 666/wrong;
 18     gromit = wrong * trousers - gromit + -42;
 19     gromit += 27182818;
 20     gromit -= -31415927;
 21     gromit /= (wrong *= 42);
 22     close = wrong < trousers and trousers <= gromit;
 23     shave = wrong > trousers and trousers >= gromit;
 24     shaun[66] = sheep;
 25     {
 26         int a, grand:1/2, day:3*4, out:-9;
 27 
 28         a = grand += day -= out;
 29     }
 30 
 31     close = -1*2+3<4*5 and  6+7>-3;
 32     shave = true or ((-(1*((2+3))))<(4*5) and ((6+7)>(-3)));
 33     if (shave != close) shave = not close;
 34     if (not  (shave == close) or not close) shave = true;
 35     else close = false;
 36     while (shave) {
 37         static int were, rabbit;
 38         static int sheep[10];
 39 
 40         sheep[2] = 1618;
 41         if (sheep[2]<496) break;
 42         wallace(gromit--, were-rabbit);
 43         { 
 44             int the, wrong, trousers;
 45 
 46             the = wrong += trousers++;
 47             if (were == rabbit) were = wrong--;  // assignment is in test
 48         }
 49     }
 50 
 51     return;
 52 }       
 53 
 54 
 55 bool penguin(char Feathers, McGraw[]; bool moon, cheese; int launch) 
 56 {
 57     static char tottington:'x';
 58     char  Wensleydale[17];
 59     char c;
 60     int i;         
 61 
 62     tottington = Feathers;
 63     Wensleydale[*McGraw] = '*';
 64     McGraw[0] = 'A';
 65     McGraw[1] = Feathers;
 66 
 67     { char c;
 68       int in:666;
 69 
 70       if (McGraw[in]=='f') return true;
 71     }
 72 }        
 73 
 74 
 75 int Wendolene(int wool; bool shaun; int yarn[]; bool preston[])
 76 {
 77     int void;
 78 
 79     return wool + yarn[0] + *yarn + yarn[7*wool];
 80 }
 81 
 82 
 83 bool ramsBottom()
 84 {
 85     int chicken[2];
 86     bool run[3];
 87     int wallace[2], gromit[3];
 88 
 89     42 * Wendolene(1+2+3, not true or true and false, chicken, run);
 90     run[*run-1];
 91 
 92     return not  wallace[1]>=-gromit[2]*3;
 93 }
 94 
 95 int cheese(int x, y) while (x>0) if (y>3) x--; else return x*x%y;
 96 
 97 int Wensleydale(int x; int y) return cheese(x, gromit);  // weird parm list
 98 
 99 int main()
100 {
101     int wool, yarn[113];
102     bool shaun, preston[22];
103 
104     wallace(cheese(62, -311), gromit);
105     yarn[?*yarn];
106     return Wendolene(*preston**yarn, shaun, yarn, preston);
107 }
108 
109 bool aBigLongVariableName6, ca9s, h8en, bay1t, drif2od, l00ps;
110 int    odd  ,	separation 		,of,
111 stuff ;
112 
113 char dog:'\t';
114 
115 record Point {
116     bool defined;
117     int x, y;
118 }
119 
120 record Line {
121     Point x, y;
122 }
123 
124 Point p, q;
125 Line l;
126 
127 setp(Point p; int x[], y; Point P[]; Line l) {
128     x[666];
129     p.x;
130     p.x.y;       // semantic failure
131     P[666].y;  
132     p.x[666];    // semantic failure
133     l.x.x = 42;  // semantic failure
134     x[3][3] = x.notvalid;     // semantic failure
135 }
136 
137 
138 
139 
